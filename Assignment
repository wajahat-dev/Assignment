===================================================================================
Q1
===================================================================================
#[derive(Debug)]
struct Book {
    author: String,
    name: String,
}

trait BookInformation {
    fn info(self) -> String;
}

impl BookInformation for Book {
    fn info(self) -> String {
        format!("Author name: {} , book name: {}", self.author, self.name)
    }
}

impl Book {
    fn new(author: String, name: String) -> Book {
        Book {
            author: author,
            name: name,
        }
    }
}

fn main() {
    let a = Book {
        author: "Wajahat".to_owned(),
        name: "lean startup".to_owned(),
    };
    println!("{:?}", a.info());
}


===================================================================================
Q2
===================================================================================
#[derive(Debug)]
struct Student {
    name: String,
}

impl Student {
    fn new(name: String) -> Student {
        Student { name: name }
    }
}

fn main() {
    let a = Student {
        name: "Wajahat".to_owned(),
    };
    println!("{:?}", a);

    let b = Student::new("wajahat".to_owned());
    println!("{:?}", b);
}


/**
 * we simply call a function that return a struct that is alreay defined in impl block. It reduce the code
 * 
 * both feel us classes and its instance of java, but associative function feel a constructer of java with new keyword
 * Example: 
 * class A{
 * 
 * }
 *class Main{
     pulic staic void main(){
        A a = new A();

     }
 } 
 *
 * whenever we create a instance of our class here A we simply build consturcter of that class with new keyword
 * similarly in rust to get a flavor of OOPs we already define a function named new() that return an instance
 * of any user-defined data type.
 * whenver, we need to make an instance of our class ( Struct user-defined ) we simply call a new() function
 * 

 * to make diretly instance. it seem to be verbose. 
 * in a condition when we need to instantiate our data-type in n number of times.
 *  
 * 
 */
